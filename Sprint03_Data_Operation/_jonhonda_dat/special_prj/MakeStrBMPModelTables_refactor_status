--SQLite script file to create the Str BMP Options Model
--version: v0.02
--by: Jon Honda
--date: 12/17/17



CREATE TABLE base_bmp_facility_values( --table holding facility calculated values for base bmps
  base_bmp_facility_value_id INTEGER PRIMARY KEY,
  base_bmp_id INTEGER,
  facility_id INTEGER,
  cip_expression_value FLOAT,
  om_expression_value FLOAT,

  FOREIGN KEY (base_bmp_id) REFERENCES base_bmps(base_bmp_id),
  FOREIGN KEY (facility_id) REFERENCES facility_chars(facility_id)
);



<<<<<<< HEAD
CREATE TABLE base_bmp_feasibility_test_results(
  base_bmp_feasibility_test_result_id INTEGER PRIMARY KEY,
  facility_id INTEGER,
  base_bmp_feasibility_test_definition_id INTEGER,
  is_feasible INTEGER,
  FOREIGN KEY (facility_id) REFERENCES facility_chars(facility_id),
  FOREIGN KEY (base_bmp_feasibility_test_definition_id) REFERENCES base_bmp_feasibility_test_definitions(base_bmp_feasibility_test_definition_id)
);

CREATE TABLE bmp_options( --defines the aggregatized values of a bmp_option
  bmp_option_id INTEGER PRIMARY KEY,
  bmp_fingerprint TEXT, -- a hashup of the bmp_option_base_component_ids that comprise this bmp option. FORMAT: |bmp_option_base_component_id||bmp_option_base_component_id| w/ id's given in ascending order
  -- <DEPRECATED. CALC AT RUNTIME> bmp_option_cip_expression_id INTEGER, --sum of base_bmp expressions
  -- <DEPRECATED. CALC AT RUNTIME> bmp_option_om_expression_id INTEGER,--sum of base_bmp expressions
  bmp_option_removal_rate_id INTEGER, --max of base_bmp removal rates
  --FOREIGN KEY (bmp_option_cip_expression_id) REFERENCES expressions(expression_id),
  --FOREIGN KEY (bmp_option_om_expression_id) REFERENCES expressions(expression_id),
  FOREIGN KEY (bmp_option_removal_rate_id) REFERENCES pollutant_removal_rates(pollutant_removal_rates_id)
);
=======

>>>>>>> 95e8ddb91b9e507052f3593090bd907e5ebf658c

CREATE TABLE bmp_option_base_components( --identifies the base_bmp components that comprise a bmp combo
  bmp_option_base_component_id INTEGER PRIMARY KEY,
  bmp_option_id INTEGER,
  base_bmp_id INTEGER,
  FOREIGN KEY (bmp_option_id) REFERENCES bmp_options(bmp_option_id),
  FOREIGN KEY (base_bmp_id) REFERENCES base_bmps(base_bmp_id)
);

<<<<<<< HEAD
CREATE TABLE facility_bmp_options(
  facility_bmp_option_id INTEGER PRIMARY KEY,
  facility_id INTEGER,
  bmp_option_id INTEGER,
  is_feasible INTEGER,
  calc_cip_cost FLOAT,
  calc_om_cost FLOAT,
  reduced_wrs_pollutant_risks_id INTEGER,
  sum_reduced_wrs_pollutant_risk FLOAT,
  sum_reduced_wrs FLOAT,
  FOREIGN KEY (facility_id) REFERENCES facility_chars(facility_id),
  FOREIGN KEY (bmp_option_id) REFERENCES bmp_options(bmp_option_id),
  FOREIGN KEY (reduced_wrs_pollutant_risks_id) REFERENCES wrs_pollutant_risks(wrs_pollutant_risks_id)
);

=======
>>>>>>> 95e8ddb91b9e507052f3593090bd907e5ebf658c


CREATE TABLE scenarios(
  scenario_id INTEGER PRIMARY KEY,
  start_datetime TEXT,
  end_datetime TEXT,
  tgt_xfield TEXT,
  tgt_yfield TEXT,
  description TEXT
);

CREATE TABLE scenario_iterations(
  scenario_iteration_id INTEGER PRIMARY KEY,
  scenario_id INTEGER,
  iteration_no INTEGER,
  reduced_wrs_pollutant_risks_id INTEGER,
  sum_reduced_wrs_pollutant_risk FLOAT,
  sum_reduced_wrs FLOAT,
  sum_cip_cost FLOAT,
  sum_om_cost FLOAT,
  tgt_xvalue FLOAT,
  tgt_yvalue FLOAT,
  achvd_xvalue FLOAT,
  achvd_yvalue FLOAT,
  rsqr_distance FLOAT,
  FOREIGN KEY (scenario_id) REFERENCES scenarios(scenario_id),
  FOREIGN KEY (reduced_wrs_pollutant_risks_id) REFERENCES wrs_pollutant_risks(reduced_wrs_pollutant_risks_id)
);

CREATE TABLE scenario_iteration_bmp_options(
  scenario_iteration_bmp_option_id INTEGER PRIMARY KEY,
  scenario_iteration_id INTEGER,
  facility_bmp_option_id INTEGER,
  FOREIGN KEY (scenario_iteration_id) REFERENCES scenario_iterations(scenario_iteration_id),
  FOREIGN KEY (facility_bmp_option_id) REFERENCES facility_bmp_options(facility_bmp_option_id)
);
<<<<<<< HEAD





CREATE TABLE facility_type_has_nel(
  -- table indicating if a facility type is subject to an effluent limit (either by Priority Based Plan, Table 3, or as City operational assignment)
  -- data is held as a wrs_pollutant_risk record with a 0 or 1 value:
      -- 0 if no effluent limit exists for the facility type
      -- 1 if effluent limit may exist for the facility type
  facility_type_has_nel_id INTEGER PRIMARY KEY,
  facility_type_id INTEGER,
  wrs_pollutant_limits_id INTEGER,
  FOREIGN KEY (facility_type_id) REFERENCES facility_types(facility_type_id),
  FOREIGN KEY (wrs_pollutant_limits_id) REFERENCES wrs_pollutant_risks(wrs_pollutant_risks_id)
);

CREATE TABLE nel_sample_classes ( -- holds sampling class types (PBP Appendix L). Each class is stored as a wrs_pollutant_risk record
  nel_sample_class_id INTEGER PRIMARY KEY,
  nel_column TEXT,
  wrs_pollutant_class_id INTEGER,
  FOREIGN KEY (wrs_pollutant_class_id) REFERENCES wrs_pollutant_risks(wrs_pollutant_risks_id)
);
=======
>>>>>>> 95e8ddb91b9e507052f3593090bd907e5ebf658c
