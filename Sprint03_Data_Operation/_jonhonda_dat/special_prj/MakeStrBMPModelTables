--SQLite script file to create the Str BMP Options Model
--version: v0.02
--by: Jon Honda
--date: 12/17/17



CREATE TABLE base_bmps( --table defining bmp technologies
  base_bmp_id INTEGER PRIMARY KEY,
  bmp_name TEXT,
  bmp_removal_rates_id INTEGER, --FK reference to bmp removal rates table
  cip_expression_id INTEGER,
  om_expression_id INTEGER,
  bmp_size_expression_id INTEGER,
  FOREIGN KEY (bmp_removal_rates_id) REFERENCES pollutant_removal_rates(pollutant_removal_rates_id),
  FOREIGN KEY (cip_expression_id) REFERENCES expressions(expression_id),
  FOREIGN KEY (om_expression_id) REFERENCES expressions(expression_id),
  FOREIGN KEY (bmp_size_expression_id) REFERENCES expressions(expression_id)
);

CREATE TABLE feasibility_test_questions( -- table holding feasibility questions for bmp_feasibility_test_results
  feasibility_test_question_id INTEGER PRIMARY KEY,
  feas_id TEXT, -- id used in input sheets to identify the feasibility question
  question_english TEXT, -- question in plain english_question,
  question_expression_id INTEGER, -- question as an expression (held in expressions table),
  FOREIGN KEY (question_expression_id) REFERENCES expressions(expression_id)
);

CREATE UNIQUE INDEX idx_ftq_feas_id ON feasibility_test_questions(feas_id);

CREATE TABLE bmp_facility_test_definitions( --table holding facility-bmp feasibility test definitions
  bmp_facility_test_definition_id INTEGER PRIMARY KEY,
  feasibility_test_question_id INTEGER,
  base_bmp_id INTEGER, --FK reference to the base bmp primary key
  FOREIGN KEY (feasibility_test_question_id) REFERENCES feasibility_test_questions(feasibility_test_question_id),
  FOREIGN KEY (base_bmp_id) REFERENCES base_bmps(base_bmp_id)
);

CREATE TABLE bmp_feasibility_test_results(
  bmp_feasibility_test_result_id INTEGER PRIMARY KEY,
  facility_id INTEGER,
  bmp_facility_test_definition_id INTEGER,
  is_feasible INTEGER,
  FOREIGN KEY (facility_id) REFERENCES facilities(facility_id),
  FOREIGN KEY (bmp_facility_test_definition_id) REFERENCES bmp_facility_test_definitions(bmp_facility_test_definition_id)
);

CREATE TABLE bmp_options(
  bmp_option_id INTEGER PRIMARY KEY,
  bmp_option_cip_expression_id INTEGER,
  bmp_option_om_expression_id INTEGER,
  bmp_option_removal_rate_id INTEGER,
  FOREIGN KEY (bmp_option_cip_expression_id) REFERENCES expressions(expression_id),
  FOREIGN KEY (bmp_option_om_expression_id) REFERENCES expressions(expression_id),
  FOREIGN KEY (bmp_option_removal_rate_id) REFERENCES pollutant_removal_rates(pollutant_removal_rates_id)
);

CREATE TABLE bmp_option_base_combos(
  bmp_option_base_combo_id INTEGER PRIMARY KEY,
  bmp_option_id INTEGER,
  base_bmp_id INTEGER,
  FOREIGN KEY (bmp_option_id) REFERENCES bmp_options(bmp_option_id),
  FOREIGN KEY (base_bmp_id) REFERENCES base_bmps(base_bmp_id)
);

CREATE TABLE facility_bmp_options(
  facility_bmp_option_id INTEGER PRIMARY KEY,
  facility_id INTEGER,
  bmp_option_id INTEGER,
  is_feasible INTEGER,
  calcd_cip_cost FLOAT,
  calc_om_cost FLOAT,
  reduced_wrs_pollutant_risks_id INTEGER,
  sum_reduced_wrs_pollutant_risk FLOAT,
  sum_reduced_wrs FLOAT,
  FOREIGN KEY (facility_id) REFERENCES facilities(facility_id),
  FOREIGN KEY (bmp_option_id) REFERENCES bmp_options(bmp_option_id),
  FOREIGN KEY (reduced_wrs_pollutant_risks_id) REFERENCES wrs_pollutant_risks(wrs_pollutant_risks_id)
);

CREATE TABLE expressions(
  expression_id INTEGER PRIMARY KEY,
  expression_name TEXT,
  expression_str TEXT,
  expression_data_type TEXT,
  vars BLOB
);

CREATE TABLE scenarios(
  scenario_id INTEGER PRIMARY KEY,
  start_datetime TEXT,
  end_datetime TEXT,
  tgt_xfield TEXT,
  tgt_yfield TEXT,
  description TEXT
);

CREATE TABLE scenario_iterations(
  scenario_iteration_id INTEGER PRIMARY KEY,
  scenario_id INTEGER,
  iteration_no INTEGER,
  reduced_wrs_pollutant_risks_id INTEGER,
  sum_reduced_wrs_pollutant_risk FLOAT,
  sum_reduced_wrs FLOAT,
  sum_cip_cost FLOAT,
  sum_om_cost FLOAT,
  tgt_xvalue FLOAT,
  tgt_yvalue FLOAT,
  achvd_xvalue FLOAT,
  achvd_yvalue FLOAT,
  rsqr_distance FLOAT,
  FOREIGN KEY (scenario_id) REFERENCES scenarios(scenario_id),
  FOREIGN KEY (reduced_wrs_pollutant_risks_id) REFERENCES wrs_pollutant_risks(reduced_wrs_pollutant_risks_id)
);

CREATE TABLE scenario_iteration_bmp_options(
  scenario_iteration_bmp_option_id INTEGER PRIMARY KEY,
  scenario_iteration_id INTEGER,
  facility_bmp_option_id INTEGER,
  FOREIGN KEY (scenario_iteration_id) REFERENCES scenario_iterations(scenario_iteration_id),
  FOREIGN KEY (facility_bmp_option_id) REFERENCES facility_bmp_options(facility_bmp_option_id)
);

CREATE TABLE pollutant_removal_rates(
  pollutant_removal_rates_id INTEGER PRIMARY KEY,
  r_tss FLOAT,
  r_turbidity FLOAT,
  r_p FLOAT,
  r_n FLOAT,
  r_nn FLOAT,
  r_an FLOAT,
  r_og FLOAT,
  r_cu FLOAT,
  r_zn FLOAT,
  r_fe FLOAT,
  r_phmin FLOAT,
  r_phmax FLOAT
);

CREATE TABLE wrs_pollutant_risks(
  wrs_pollutant_risks_id INTEGER PRIMARY KEY,
  wrs_tss FLOAT,
  wrs_turbidity FLOAT,
  wrs_p FLOAT,
  wrs_n FLOAT,
  wrs_nn FLOAT,
  wrs_an FLOAT,
  wrs_og FLOAT,
  wrs_cu FLOAT,
  wrs_zn FLOAT,
  wrs_fe FLOAT,
  wrs_phmin FLOAT,
  wrs_phmax FLOAT
);

CREATE TABLE facilities ( --table holding facility definitions
  facility_id INTEGER PRIMARY KEY,
  facility_name TEXT,
  wrs_pollutant_risks_id INTEGER
);

CREATE TABLE facility_chars ( --table holding facility characteristics
  facility_char_id INTEGER PRIMARY KEY,
  Fac_Name TEXT,
  Fac_Type TEXT,
  Fac_Add TEXT,
  Fac_TMK TEXT,
  GW_Risk TEXT,
  Fac_Area FLOAT,
  Bldg_Area FLOAT,
  Pave_Area FLOAT,
  Imperv FLOAT,
  Tm FLOAT,
  Runoff_Coeff FLOAT,
  Length FLOAT,
  Char_Ground TEXT,
  Fac_Slope FLOAT,
  TC FLOAT,
  CF FLOAT,
  Q_Peak FLOAT,
  WQV FLOAT,
  Des_Storm_Depth FLOAT,
  Runoff_Coeff2 FLOAT,
  Imperv2 FLOAT,
  Fac_Area2 FLOAT,
  WQFR FLOAT,
  Runoff_Coeff3 FLOAT,
  WQ_Intensity FLOAT,
  Fac_Area3 FLOAT,
  OP_Shutdown TEXT,
  Soil_Type TEXT,
  FP_100_Year TEXT,
  Num_Ind_DP INTEGER,
  Runoff_Type TEXT,
  Ex_Struct_BMP TEXT,
  Count_Pipe INTEGER,
  Count_Sheet INTEGER,
  Count_CB INTEGER,
  Count_Chan INTEGER,
  Count_DS INTEGER,
  Count_TD INTEGER,
  CONSTRAINT unq_fac_name UNIQUE(fac_name)
);
